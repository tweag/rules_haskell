load(":inline_tests.bzl", "sh_inline_test")
load("@bazel_tools//tools/build_rules:test_rules.bzl", "rule_test")
load("@os_info//:os_info.bzl", "is_windows")
load("//tests:rule_test_exe.bzl", "rule_test_exe")
load(
    "//haskell:c2hs.bzl",
    "c2hs_toolchain",
)
load(
    "//haskell:defs.bzl",
    "haskell_binary",
    "haskell_doc",
    "haskell_library",
    "haskell_repl",
)
load(
    "//haskell:doctest.bzl",
    "haskell_doctest_toolchain",
)
load(
    "//haskell:protobuf.bzl",
    "haskell_proto_toolchain",
)
load(
    "//:constants.bzl",
    "test_ghc_version",
)

exports_files(
    [
        "run-start-script.sh",
        "scripts/exec.sh",
    ],
    visibility = ["//tests/shellcheck:__pkg__"],
)

package(default_testonly = 1)

config_setting(
    name = "nix",
    constraint_values = [
        "@io_tweag_rules_nixpkgs//nixpkgs/constraints:support_nix",
    ],
)

alias(
    name = "zlib",
    # This is a dependency to @stackage-zlib.
    testonly = 0,
    actual = select({
        ":nix": "@zlib.dev//:zlib",
        "//conditions:default": "@zlib.hs//:zlib",
    }),
    visibility = ["//visibility:public"],
)

haskell_doctest_toolchain(
    name = "doctest-toolchain",
    doctest = "@stackage-exe//doctest",
)

# This toolchain is morally testonly. However, that would break our
# tests of haskell_library_rules: aspects of non-testonly
# proto_library rules (from com_google_protobuf) can't themselves be
# testonly.

haskell_proto_toolchain(
    name = "protobuf-toolchain",
    testonly = 0,
    plugin = "@stackage-exe//proto-lens-protoc",
    protoc = "@com_google_protobuf//:protoc",
    deps = [
        "@stackage//:base",
        "@stackage//:bytestring",
        "@stackage//:containers",
        "@stackage//:data-default-class",
        "@stackage//:deepseq",
        "@stackage//:lens-family",
        "@stackage//:lens-family-core",
        "@stackage//:mtl",
        "@stackage//:proto-lens",
        "@stackage//:proto-lens-runtime",
        "@stackage//:text",
        "@stackage//:vector",
    ],
)

c2hs_toolchain(
    name = "c2hs-toolchain",
    c2hs = "@stackage-exe//c2hs",
)

rule_test_exe(
    name = "test-binary-simple",
    size = "small",
    generates = ["binary-simple"],
    rule = "//tests/binary-simple",
)

rule_test_exe(
    name = "test-binary-custom-main",
    size = "small",
    generates = ["binary-custom-main"],
    rule = "//tests/binary-custom-main",
)

rule_test_exe(
    name = "test-binary-with-lib",
    size = "small",
    generates = ["binary-with-lib"],
    rule = "//tests/binary-with-lib",
)

rule_test_exe(
    name = "test-binary-with-prebuilt",
    size = "small",
    generates = ["binary-with-prebuilt"],
    rule = "//tests/binary-with-prebuilt",
)

rule_test_exe(
    name = "test-binary-with-main",
    size = "small",
    generates = ["binary-with-main"],
    rule = "//tests/binary-with-main",
)

rule_test_exe(
    name = "test-binary-with-sysdeps",
    size = "small",
    generates = ["binary-with-sysdeps"],
    rule = "//tests/binary-with-sysdeps",
)

sh_test(
    name = "test-binary-with-data{}".format(".exe" if is_windows else ""),
    size = "small",
    srcs = ["//tests/binary-with-data"],
    args = ["$(location //tests/binary-with-data:bin1)"],
    data = ["//tests/binary-with-data:bin1"],
)

config_setting(
    name = "debug_build",
    values = {
        "compilation_mode": "dbg",
    },
)

config_setting(
    name = "fastbuild_darwin",
    values = {
        "compilation_mode": "fastbuild",
        "cpu": "darwin",
    },
)

config_setting(
    name = "fastbuild_windows",
    values = {
        "compilation_mode": "fastbuild",
        "cpu": "x64_windows",
    },
)

rule_test(
    name = "test-library-deps",
    size = "small",
    # Bazel does not allow nested select statements. Therefore we flatten
    # compilation_mode and cpu conditions into one select statement.
    generates = select({
        ":debug_build": [
            # In profiling build we only generate profiling static archives.
            "libHStestsZSlibrary-depsZSlibrary-deps_p.a",
        ],
        ":fastbuild_darwin": [
            "libHStestsZSlibrary-depsZSlibrary-deps-ghc{}.dylib".format(test_ghc_version),
            "libHStestsZSlibrary-depsZSlibrary-deps.a",
        ],
        ":fastbuild_windows": [
            "libHStestsZSlibrary-depsZSlibrary-deps.a",
        ],
        "//conditions:default": [
            "libHStestsZSlibrary-depsZSlibrary-deps-ghc{}.so".format(test_ghc_version),
            "libHStestsZSlibrary-depsZSlibrary-deps.a",
        ],
    }),
    rule = "//tests/library-deps",
)

rule_test_exe(
    name = "test-hsc",
    size = "small",
    generates = ["hsc"],
    rule = "//tests/hsc",
)

rule_test(
    name = "test-haddock",
    size = "small",
    generates = [
        "haddock/array-0.5.4.0",
        "haddock/base-4.14.1.0",
        "haddock/deepseq-1.4.4.0",
        "haddock/ghc-boot-th-8.10.4",
        "haddock/ghc-prim-0.6.1",
        "haddock/index",
        "haddock/integer-gmp-1.0.3.0",
        "haddock/pretty-1.1.3.6",
        "haddock/template-haskell-2.16.0.0",
        "haddock/testsZShaddockZShaddock-lib-a",
        "haddock/testsZShaddockZShaddock-lib-b",
        "haddock/testsZShaddockZShaddock-lib-deep",
    ],
    rule = "//tests/haddock",
)

rule_test(
    name = "test-haskell_doctest",
    size = "small",
    generates = [
        "doctest-log-doctest-lib-lib-b",
    ],
    rule = "//tests/haskell_doctest:doctest-lib",
)

rule_test_exe(
    name = "test-haskell_test",
    size = "small",
    generates = ["haskell_test"],
    rule = "//tests/haskell_test:haskell_test",
)

rule_test_exe(
    name = "test-java_classpath",
    size = "small",
    generates = ["java_classpath"],
    rule = "//tests/java_classpath",
)

rule_test_exe(
    name = "test-cc_haskell_import-cc-link",
    size = "small",
    generates = ["cc-bin"],
    rule = "//tests/cc_haskell_import:cc-bin",
    tags = ["requires_threaded_rts"],
)

sh_test(
    name = "test-cc_haskell_import_python",
    size = "small",
    srcs = ["scripts/exec.sh"],
    args = ["tests/cc_haskell_import/python_add_one"],
    data = [
        "//tests/cc_haskell_import:python_add_one",
        "@bazel_tools//tools/bash/runfiles",
    ],
    tags = [
        "requires_dynamic",
        "requires_threaded_rts",
    ],
)

sh_inline_test(
    name = "test-haskell_binary-with-link-flags",
    size = "small",
    args = ["$(location //tests/binary-with-link-flags:binary-with-link-flags)"],
    data = ["//tests/binary-with-link-flags"],
    script = """\
set -e

# Fails if executable was linked without -threaded flag.
$1 +RTS -N
""",
    tags = [
        # On Windows this needs to use rlocation to determine the runtime location of the binary.
        "dont_test_on_windows",
    ],
)

rule_test_exe(
    name = "test-lhs",
    size = "small",
    generates = ["lhs-bin"],
    rule = "//tests/lhs:lhs-bin",
)

rule_test_exe(
    name = "test-hs-boot",
    size = "small",
    generates = ["hs-boot"],
    rule = "//tests/hs-boot:hs-boot",
)

rule_test_exe(
    name = "test-textual-hdrs",
    size = "small",
    generates = ["textual-hdrs"],
    rule = "//tests/textual-hdrs:textual-hdrs",
)

rule_test_exe(
    name = "test-two-libs",
    size = "small",
    generates = ["two-libs"],
    rule = "//tests/two-libs:two-libs",
)

genrule(
    name = "run-bin-with-lib",
    outs = ["dummy"],
    cmd = """sh -c '
    set -e
    $(location //tests/binary-with-lib:binary-with-lib)
    touch $(location dummy)
'""",
    tools = ["//tests/binary-with-lib"],
)

rule_test(
    name = "test-run-bin-with-lib",
    size = "small",
    generates = ["dummy"],
    rule = "//tests:run-bin-with-lib",
)

genrule(
    name = "run-bin-with-lib-dynamic",
    outs = ["dyn-dummy"],
    cmd = """sh -c '
    set -e
    $(location //tests/binary-with-lib-dynamic:binary-with-lib-dynamic)
    touch $(location dyn-dummy)
'""",
    tools = ["//tests/binary-with-lib-dynamic"],
)

rule_test(
    name = "test-run-bin-with-lib-dynamic",
    size = "small",
    generates = ["dyn-dummy"],
    rule = "//tests:run-bin-with-lib-dynamic",
)

genrule(
    name = "run-bin-with-c-lib",
    outs = ["c-dummy"],
    cmd = """sh -c '
    set -e
    $(location //tests/c-compiles)
    touch $(location c-dummy)
'""",
    tools = ["//tests/c-compiles"],
)

rule_test(
    name = "test-run-bin-with-c-lib",
    size = "small",
    generates = ["c-dummy"],
    rule = "//tests:run-bin-with-c-lib",
)

# This is the test runner
haskell_binary(
    name = "run-tests",
    srcs = ["RunTests.hs"],
    deps = [
        "//tests/hackage:base",
        "//tests/hackage:directory",
        "//tests/hackage:filepath",
        "//tests/hackage:process",
        "@stackage//:hspec",
        "@stackage//:hspec-core",
        "@stackage//:safe-exceptions",
        "@stackage//:temporary",
    ],
)

haskell_library(
    name = "lz4",
    srcs = [
        "LZ4.hs",
    ],
    tags = ["requires_lz4"],
    deps = [
        "//tests/hackage:base",
        "//tests/hackage:bytestring",
        "@nixpkgs_lz4",
    ],
)

haskell_library(
    name = "utils",
    srcs = ["Foo.hs"],
    tags = ["requires_lz4"],
    deps = [
        ":lz4",
        "//tests/hackage:base",
    ],
)

haskell_doc(
    name = "toto",
    tags = [
        "dont_test_on_windows",
        "requires_lz4",
    ],
    deps = [":utils"],
)

haskell_repl(
    name = "hie-bios",
    collect_data = False,
    deps = [
        "//tests:run-tests",
        "//tests/binary-with-lib",
    ],
)

filegroup(
    name = "starlark_files",
    testonly = True,
    srcs = [
        "BUILD.bazel",
        "analysis_tests.bzl",
        "failing-repros/should_fail.bzl",
        "inline_tests.bzl",
        "rule_test_exe.bzl",
        "//tests/binary-custom-main:starlark_files",
        "//tests/binary-dynamic:starlark_files",
        "//tests/binary-exe-path:starlark_files",
        "//tests/binary-indirect-cbits:starlark_files",
        "//tests/binary-linkstatic-flag:starlark_files",
        "//tests/binary-simple:starlark_files",
        "//tests/binary-with-compiler-flags:starlark_files",
        "//tests/binary-with-data:starlark_files",
        "//tests/binary-with-import:starlark_files",
        "//tests/binary-with-indirect-sysdeps:starlark_files",
        "//tests/binary-with-lib:starlark_files",
        "//tests/binary-with-lib-dynamic:starlark_files",
        "//tests/binary-with-link-flags:starlark_files",
        "//tests/binary-with-main:starlark_files",
        "//tests/binary-with-plugin:starlark_files",
        "//tests/binary-with-prebuilt:starlark_files",
        "//tests/binary-with-sysdeps:starlark_files",
        "//tests/binary-with-tool:starlark_files",
        "//tests/c-compiles:starlark_files",
        "//tests/c-compiles-still:starlark_files",
        "//tests/c2hs:starlark_files",
        "//tests/cabal-toolchain-flags:starlark_files",
        "//tests/cc_haskell_import:starlark_files",
        "//tests/cpp_macro_conflict:starlark_files",
        "//tests/data:starlark_files",
        "//tests/encoding:starlark_files",
        "//tests/external-haskell-repository:starlark_files",
        "//tests/extra-source-files:starlark_files",
        "//tests/failing-repros/isystem-issue:starlark_files",
        "//tests/failures/transitive-deps:starlark_files",
        "//tests/generated-modules:starlark_files",
        "//tests/ghc:starlark_files",
        "//tests/ghc-check:starlark_files",
        "//tests/ghcide:starlark_files",
        "//tests/hackage:starlark_files",
        "//tests/haddock:starlark_files",
        "//tests/haddock-with-plugin:starlark_files",
        "//tests/haddock_protobuf:starlark_files",
        "//tests/haskell_cabal_binary:starlark_files",
        "//tests/haskell_cabal_datafiles/compare_other_cabal_functions:starlark_files",
        "//tests/haskell_cabal_datafiles/haskell_cabal_binary_with_datafiles:starlark_files",
        "//tests/haskell_cabal_datafiles/haskell_cabal_library_with_datafiles:starlark_files",
        "//tests/haskell_cabal_datafiles/other_binary/haskell_cabal_library_datafiles_2:starlark_files",
        "//tests/haskell_cabal_datafiles/other_script/src:starlark_files",
        "//tests/haskell_cabal_doctest:starlark_files",
        "//tests/haskell_cabal_library:starlark_files",
        "//tests/haskell_cabal_library_depends_on_haskell_library:starlark_files",
        "//tests/haskell_cabal_library_sublibrary_name:starlark_files",
        "//tests/haskell_cabal_package:starlark_files",
        "//tests/haskell_doctest:starlark_files",
        "//tests/haskell_import:starlark_files",
        "//tests/haskell_module:starlark_files",
        "//tests/haskell_proto_library:starlark_files",
        "//tests/haskell_proto_simple:starlark_files",
        "//tests/haskell_test:starlark_files",
        "//tests/haskell_toolchain_library:starlark_files",
        "//tests/hidden-modules:starlark_files",
        "//tests/hie-bios:starlark_files",
        "//tests/hs-boot:starlark_files",
        "//tests/hsc:starlark_files",
        "//tests/indirect-link:starlark_files",
        "//tests/java_classpath:starlark_files",
        "//tests/lhs:starlark_files",
        "//tests/library-deps:starlark_files",
        "//tests/library-empty:starlark_files",
        "//tests/library-exports:starlark_files",
        "//tests/library-linkstatic-flag:starlark_files",
        "//tests/library-with-cbits:starlark_files",
        "//tests/library-with-includes:starlark_files",
        "//tests/library-with-sysdeps:starlark_files",
        "//tests/library-with-sysincludes:starlark_files",
        "//tests/multi_repl:starlark_files",
        "//tests/package-id-clash:starlark_files",
        "//tests/package-id-clash-binary:starlark_files",
        "//tests/package-name:starlark_files",
        "//tests/package-reexport:starlark_files",
        "//tests/package_configuration:starlark_files",
        "//tests/plugin-install-order:starlark_files",
        "//tests/repl-flags:starlark_files",
        "//tests/repl-make-variables:starlark_files",
        "//tests/repl-multiple-definition:starlark_files",
        "//tests/repl-name-conflicts:starlark_files",
        "//tests/repl-targets:starlark_files",
        "//tests/runfiles:starlark_files",
        "//tests/sandwich:starlark_files",
        "//tests/shellcheck:starlark_files",
        "//tests/solib_dir:starlark_files",
        "//tests/stack-snapshot-deps:starlark_files",
        "//tests/stackage_zlib_runpath:starlark_files",
        "//tests/target-name:starlark_files",
        "//tests/template-haskell-with-cbits:starlark_files",
        "//tests/textual-hdrs:starlark_files",
        "//tests/two-libs:starlark_files",
        "//tests/two-same-file:starlark_files",
        "//tests/unit-tests:starlark_files",
        "//tests/version-macros:starlark_files",
    ],
    visibility = ["//visibility:public"],
)
