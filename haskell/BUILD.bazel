load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load("@rules_python//python:defs.bzl", "py_binary", "py_library")
load(
    "@rules_haskell//haskell:private/haskell_impl.bzl",
    "haskell_toolchain_libraries",
)
load(
    "@rules_haskell//haskell:private/cc_wrapper.bzl",
    "cc_wrapper",
)
load(
    "@rules_haskell//haskell:cabal_wrapper.bzl",
    "cabal_wrapper",
)
load(
    "@rules_haskell//haskell:private/runghc.bzl",
    "runghc",
)
load(
    "@rules_haskell//haskell:toolchain_info.bzl",
    "haskell_toolchain_info",
)

exports_files(
    glob(["*.bzl"]) + [
        "assets/ghci_script",
        "private/cabal_wrapper.sh.tpl",
        "private/cabal_wrapper.py",
        "private/coverage_wrapper.sh.tpl",
        "private/ghci_repl_wrapper.sh",
        "private/haddock_wrapper.sh.tpl",
        "private/cc_wrapper.py.tpl",
        "private/cc_wrapper_windows.sh.tpl",
        "private/pkgdb_to_bzl.py",
    ],
)

# to make functions visible to unit tests
exports_files(
    ["private/actions/link.bzl"],
    visibility = ["//tests/unit-tests:__pkg__"],
)

exports_files(
    ["private/ghc_wrapper.sh"],
    visibility = ["//tests/shellcheck:__pkg__"],
)

bzl_library(
    name = "bazel_json",
    srcs = [
        "//vendor/bazel_json/lib:json_parser.bzl",
    ],
)

# @bazel_tools//tools does not define a bzl_library itself, instead we are
# supposed to define our own using the @bazel_tools//tools:bzl_srcs filegroup.
# See https://github.com/bazelbuild/skydoc/issues/166
bzl_library(
    name = "bazel_tools",
    srcs = [
        "@bazel_tools//tools:bzl_srcs",
    ],
)

bzl_library(
    name = "haskell",
    srcs = glob(["**/*.bzl"]),
    visibility = ["//visibility:public"],
    deps = [
        ":bazel_json",
        ":bazel_tools",
        "//haskell/experimental:defs.bzl",
        "//haskell/experimental:providers.bzl",
        "//haskell/experimental:transitions.bzl",
        "@bazel_skylib//lib:collections",
        "@bazel_skylib//lib:dicts",
        "@bazel_skylib//lib:paths",
        "@bazel_skylib//lib:shell",
        "@bazel_skylib//lib:versions",
        "@io_tweag_rules_nixpkgs//nixpkgs",
        "@rules_sh//sh:posix",
    ],
)

cc_wrapper(
    name = "cc_wrapper",
    visibility = ["//visibility:public"],
)

cabal_wrapper(
    name = "cabal_wrapper",
    visibility = ["//visibility:public"],
)

py_binary(
    name = "pkgdb_to_bzl",
    srcs = ["private/pkgdb_to_bzl.py"],
    visibility = ["//visibility:public"],
)

py_library(
    name = "package_configuration",
    srcs = ["private/package_configuration.py"],
    imports = ["private"],
    visibility = ["//tests/package_configuration:__subpackages__"],
)

runghc(
    name = "runghc",
    visibility = ["//visibility:public"],
)

py_binary(
    name = "ls_modules",
    srcs = ["private/ls_modules.py"],
    visibility = ["//visibility:public"],
    deps = [":package_configuration"],
)

sh_binary(
    name = "ghc_wrapper",
    srcs = ["private/ghc_wrapper.sh"],
    visibility = ["//visibility:public"],
)

py_binary(
    name = "version_macros",
    srcs = ["private/version_macros.py"],
    visibility = ["//visibility:public"],
)

# generate the _GHC_BINDISTS dict
py_binary(
    name = "gen-ghc-bindist",
    srcs = [":gen_ghc_bindist.py"],
    main = ":gen_ghc_bindist.py",
    visibility = ["//visibility:public"],
)

# toolchains must have a valid toolchain_type from bazel 0.21
toolchain_type(
    name = "toolchain",
    visibility = ["//visibility:public"],
)

toolchain_type(
    name = "doctest-toolchain",
    visibility = ["//visibility:public"],
)

# XXX: This target is a work-around for toolchain transitions not being
# implemented, yet. See
# https://github.com/bazelbuild/proposals/blob/master/designs/2019-02-12-toolchain-transitions.md
# This will need to be revisited once that proposal is implemented.
haskell_toolchain_libraries(
    name = "toolchain-libraries",
    visibility = ["//visibility:public"],
)

config_setting(
    name = "use_worker",
    define_values = {
        "use_worker": "True",
    },
)

haskell_toolchain_info(
    name = "toolchain_info",
)

filegroup(
    name = "starlark_files",
    testonly = True,
    srcs = [
        "BUILD.bazel",
        "c2hs.bzl",
        "cabal.bzl",
        "cabal_wrapper.bzl",
        "cc.bzl",
        "cc_toolchain_config.bzl",
        "defs.bzl",
        "doctest.bzl",
        "ghc_bindist.bzl",
        "haddock.bzl",
        "nixpkgs.bzl",
        "plugins.bzl",
        "private/actions/compile.bzl",
        "private/actions/info.bzl",
        "private/actions/link.bzl",
        "private/actions/package.bzl",
        "private/actions/runghc.bzl",
        "private/cc_libraries.bzl",
        "private/cc_wrapper.bzl",
        "private/context.bzl",
        "private/dependencies.bzl",
        "private/expansions.bzl",
        "private/haskell_impl.bzl",
        "private/java.bzl",
        "private/list.bzl",
        "private/mode.bzl",
        "private/packages.bzl",
        "private/path_utils.bzl",
        "private/pkg_id.bzl",
        "private/pkgdb_to_bzl.bzl",
        "private/runghc.bzl",
        "private/set.bzl",
        "private/validate_attrs.bzl",
        "private/version_macros.bzl",
        "private/versions.bzl",
        "private/workspace_utils.bzl",
        "protobuf.bzl",
        "providers.bzl",
        "repl.bzl",
        "repositories.bzl",
        "toolchain.bzl",
        "toolchain_info.bzl",
        "//haskell/c2hs:starlark_files",
        "//haskell/experimental:starlark_files",
        "//haskell/platforms:starlark_files",
    ],
    visibility = ["//visibility:public"],
)
