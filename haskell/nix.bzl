"""Loading of haskell packages from nixpkgs"""

load(
    "@io_tweag_rules_nixpkgs//nixpkgs:nixpkgs.bzl",
    "nixpkgs_package",
)

def haskell_nixpkgs_package(
        name,
        attribute_path,
        nix_file_deps = [],
        repositories = {},
        build_file_content = None,
        build_file = None,
        *args,
        **kwargs):
    """Load a single haskell package.
    The package is expected to be in the form of the packages generated by
    `genBazelBuild.nix`
    """
    repositories = {
        "bazel_haskell_wrapper": "@io_tweag_rules_haskell//haskell:nix/default.nix",
    } + repositories

    nixpkgs_args = dict(
        name = name,
        attribute_path = attribute_path,
        build_file_content = build_file_content,
        nix_file_deps = nix_file_deps + ["@io_tweag_rules_haskell//haskell:nix/default.nix"],
        repositories = repositories,
        *args,
        **kwargs
    )

    if build_file_content:
        nixpkgs_args["build_file_content"] = build_file_content
    elif build_file:
        nixpkgs_args["build_file"] = build_file
    else:
        nixpkgs_args["build_file_content"] = """
package(default_visibility = ["//visibility:public"])
load("@io_tweag_rules_haskell//haskell:import.bzl", haskell_import_new = "haskell_import")

load(":BUILD.bzl", "targets")
targets()
"""

    nixpkgs_package(
        **nixpkgs_args
    )

def _bundle_impl(repository_ctx):
    build_file_content = """
package(default_visibility = ["//visibility:public"])
    """
    for package in repository_ctx.attr.packages:
        build_file_content += """
alias(
    name = "{package}",
    actual = "@{base_repo}-{package}//:pkg",
)
        """.format(
            package = package,
            base_repo = repository_ctx.attr.base_repository,
        )
    repository_ctx.file("BUILD", build_file_content)

bundle = repository_rule(
    attrs = {
        "packages": attr.string_list(),
        "base_repository": attr.string(),
    },
    implementation = _bundle_impl,
)

def haskell_nixpkgs_packages(name, base_attribute_path, packages, *args, **kwargs):
    """Import a set of haskell packages from nixpkgs.

    This takes as input the same arguments as `nixpkgs_package`, expecting the
    `attribute_path` to resolve to a set of haskell packages (such as
    `haskellPackages` or `haskell.packages.ghc822`) preprocessed by the
    `genBazelBuild` function. It also takes as input a list of packages to
    import (which can be generated by the `gen_packages_list` function).

    Args:

      base_attribute_path: The attribute path in the nix expression pointing to
          the `haskellPackages` set
      packages: The list of packages to generate a definition for

    Example:

      In `haskellPackages.nix`:

      ```nix
      with import <nixpkgs> {};

      let wrapPackages = callPackage <bazel_haskell_wrapper> { }; in
      { haskellPackages = wrapPackages haskell.packages.ghc822; }
      ```

      In your `WORKSPACE`

      ```bazel
      # Define a nix repository to fetch the packages from
      load("@io_tweag_rules_nixpkgs//nixpkgs:nixpkgs.bzl",
          "nixpkgs_git_repository")
      nixpkgs_git_repository(
          name = "nixpkgs",
          revision = "9a787af6bc75a19ac9f02077ade58ddc248e674a",
      )

      load("@io_tweag_rules_haskell//haskell:nix.bzl",
          "haskell_nixpkgs_packages",
          "gen_packages_list")

      # Generate a list of all the available haskell packages
      gen_packages_list(
          name = "hackage-packages",
          repositories = {"@nixpkgs": "nixpkgs"},
          nix_file = "//haskellPackages.nix",
          base_attribute_path = "haskellPackages",
      )
      load("@hackage-packages//:all-haskell-packages.bzl", "packages")

      # Define the set of haskell packages
      haskell_nixpkgs_packages(
          name = "hackage",
          packages = packages,
          repositories = { "@nixpkgs": "nixpkgs" },
          nix_file = "haskellPackages.nix",
          base_attribute_path = "haskellPackages",
      )
      ```

      Then in your `BUILD` files, you can access to the whole of hackage as
      `@hackage//:{your-package-name}`
    """
    for package in packages:
        haskell_nixpkgs_package(
            name = name + "-" + package,
            attribute_path = base_attribute_path + "." + package,
            *args,
            **kwargs
        )
    bundle(
        name = name,
        packages = packages,
        base_repository = name,
    )

def gen_packages_list(name, base_attribute_path, repositories = {}, *args, **kwargs):
    """Generate a list of all the available haskell packages"""
    repositories = {
        "bazel_haskell_wrapper": "@io_tweag_rules_haskell//haskell:nix/default.nix",
    } + repositories
    nixpkgs_package(
        name = name,
        attribute_path = base_attribute_path + ".packageNames",
        repositories = repositories,
        build_file_content = """
exports_files(["all-haskell-packages.bzl"])
        """,
        *args,
        **kwargs
    )
