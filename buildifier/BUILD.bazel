load("@com_github_bazelbuild_buildtools//buildifier:def.bzl", "buildifier", "buildifier_test")

buildifier_exclude_patterns = [
    "./vendor/**",
]

_lint_warnings = [
    "-function-docstring",  # TODO
    "-function-docstring-args",  # TODO
    "-function-docstring-header",  # TODO
    "-function-docstring-return",  # TODO
    "-native-cc-common",
    "-native-cc-info",
    "-native-cc-library",
    "-native-cc-shared-library-info",
    "-native-java-common",
    "-native-java-info",
    "-native-proto",
    "-native-proto-common",
    "-native-proto-info",
    "-module-docstring",
]

# Run this to fix the errors in BUILD files.
buildifier(
    name = "buildifier",
    exclude_patterns = buildifier_exclude_patterns,
    lint_mode = "fix",
    lint_warnings = _lint_warnings,
    verbose = True,
)

buildifier_test(
    name = "buildifier_test",
    srcs = [
        "//:BUILD.bazel",
        "//:MODULE.bazel",
        "//:WORKSPACE",
        "//:WORKSPACE.bzlmod",
        "//:constants.bzl",
        "//:non_module_dev_deps.bzl",
        "//buildifier:all_files",
        "//debug/linking_utils:all_files",
        "//docs:all_files",
        "//extensions:all_files",
        "//haskell:all_files",
        "//nixpkgs:all_files",
        "//rule_info:all_files",
        "//tests:all_files",
        "//tools:all_files",
        "@examples-arm//:all_files",
        "@examples//:all_files",
        "@tutorial//:all_files",
    ],
    lint_mode = "warn",
    lint_warnings = _lint_warnings,
    mode = "diff",
    tags = [
        "dont_test_on_windows",
        "manual",
    ],
)

filegroup(
    name = "all_files",
    testonly = True,
    srcs = glob(["**"]),
    visibility = ["//visibility:public"],
)
