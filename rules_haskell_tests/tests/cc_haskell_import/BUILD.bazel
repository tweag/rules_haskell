load("@rules_cc//cc:defs.bzl", "cc_binary")
load(
    "@rules_haskell//haskell:defs.bzl",
    "haskell_library",
)
load("@rules_python//python:defs.bzl", "py_binary")

package(default_testonly = 1)

haskell_library(
    name = "hs-lib-a",
    srcs = ["LibA.hs"],
    deps = [
        "//tests/data:ourclibrary",
        "//tests/hackage:base",
    ],
)

haskell_library(
    name = "hs-lib-b",
    srcs = ["LibB.hs"],
    deps = [
        ":hs-lib-a",
        "//tests/hackage:base",
    ],
)

cc_binary(
    name = "cc-bin",
    srcs = [
        "main.c",
    ],
    tags = ["requires_threaded_rts"],
    visibility = ["//tests:__subpackages__"],
    deps = [
        ":hs-lib-b",
    ],
)

# We go one step further and use the Haskell library from above
# to build a static .so which is then loaded with a Python script
# and calls the Haskell function constructed from GHC C FFI.

# shared library which python will dlopen
cc_binary(
    name = "hs-lib-b-wrapped.so",
    linkshared = 1,
    linkstatic = 0,
    tags = [
        "requires_dynamic",
        "requires_threaded_rts",
    ],
    visibility = ["//tests:__subpackages__"],
    deps = [
        ":hs-lib-b",
    ],
)

# just dlopens hb-lib-b-wrapped.so and prints it
py_binary(
    name = "python_add_one",
    srcs = ["python_add_one.py"],
    data = [
        ":hs-lib-b-wrapped.so",
    ],
    python_version = "PY3",
    srcs_version = "PY3ONLY",
    # This requires a shared object, which is not provided in profiling mode.
    # Hence we disable this test in profiling mode using requires_dynamic.
    tags = [
        "requires_dynamic",
        "requires_threaded_rts",
    ],
    visibility = ["//tests:__subpackages__"],
    deps = [
        "@rules_python//python/runfiles",
    ],
)

filegroup(
    name = "all_files",
    testonly = True,
    srcs = glob(["**"]),
    visibility = ["//visibility:public"],
)
