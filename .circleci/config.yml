version: 2

# NOTE:
#   Disk cache:
#       We don't want to keep old artifacts around so we always build from
#       scratch on master builds and upload the new cache afterwards. Because
#       Circle doesn't allow skipping a "restore_cache" we create a dummy
#       "empty" cache that's only ever pulled on master. Alternatively we could
#       ask Bazel to clean up old items (LRU style) but the documentation is
#       very terse and I could not figure how to do it:
#           https://docs.bazel.build/versions/master/remote-caching.html
#       It also appears that there's ongoing work but the feature is not ready:
#           https://github.com/bazelbuild/bazel/issues/5139
#
#       Currently the disk cache is only implemented for the Darwin builds,
#       which were the slowest ones. There is no reason why a disk cache
#       couldn't be used for the other jobs: I just haven't gotten around to
#       doing it.

jobs:
  build-darwin:
    macos:
      xcode: "9.0"
    steps:
      - checkout
      - run:
          name: Install Nix
          command: |
            curl https://nixos.org/nix/install | sh

      - run:
          name: Install cachix
          shell: /bin/bash -eilo pipefail
          command: |
            nix-env -iA cachix -f https://github.com/NixOS/nixpkgs/tarball/db557aab7b690f5e0e3348459f2e4dc8fd0d9298

      - run:
          name: Run cachix
          shell: /bin/bash -eilo pipefail
          command: |
            cachix use tweag
            cachix push tweag --watch-store
          background: true

      - run:
          name: Configure
          command: |
            mkdir -p ~/.cache/bazel/

            echo "build:ci --host_platform=@rules_haskell//haskell/platforms:darwin_x86_64_nixpkgs" >> .bazelrc.local
            echo "build:ci --disk_cache=~/.cache/bazel/" >> .bazelrc.local
            echo "common:ci --test_tag_filters -dont_test_on_darwin" >> .bazelrc.local

      - restore_cache:
          keys: # see note about 'Disk cache'
              - v1-rules_haskell-empty-{{ .Branch }}-
              - v1-rules_haskell-cache-{{ .Branch }}-
              - v1-rules_haskell-cache-master-

      - run:
          name: Prefetch Stackage snapshot
          shell: /bin/bash -eilo pipefail
          command: |
            # Retry if needed due to network flakiness.
            nix-shell --arg docTools false --pure --run \
              'cmd="bazel fetch @stackage//..."; $cmd || $cmd || $cmd'
      - run:
          name: Build tests
          shell: /bin/bash -eilo pipefail
          command: |
            nix-shell --arg docTools false --pure --run \
              'bazel build --config ci //tests/...'
      - run:
          name: Run tests
          shell: /bin/bash -eilo pipefail
          command: |

            # Keep CI awake
            while true; do echo "."; sleep 60; done &

            # XXX 2019-01-22 Disable start script checking on Darwin
            # due to a clash between binutils and clang.
            # nix-shell --arg docTools false --pure --run \
            #   './tests/run-start-script.sh --use-nix'
            nix-shell --arg docTools false --pure --run '
            bazel build --config ci //tests:run-tests
            ./bazel-ci-bin/tests/run-tests
            bazel coverage //tests/... --config ci --build_tag_filters "coverage-compatible" --test_tag_filters "coverage-compatible" --test_output=all
            '

        # see note about 'Disk cache'
      - save_cache:
          key: v1-rules_haskell-cache-{{ .Branch }}-{{ .BuildNum }}
          paths:
              - ~/.cache/bazel/

      - run:
          name: Clean up cache
          shell: /bin/bash -eilo pipefail
          command: |
            rm -rf ~/.cache/bazel/
            mkdir -p ~/.cache/bazel/

      - save_cache:
          key: v1-rules_haskell-empty-master-{{ .BuildNum }}
          paths:
              - ~/.cache/bazel/

workflows:
  version: 2
  build:
    jobs:
      - build-darwin:
          context: org-global # for the cachix token
