""" This module extension declares the toolchains from the `@nix_haskell_toolchains_configurations//:nix_haskell_toolchains_configurations.bzl` file.
This file is produced by the `nix_haskell_toolchains` extension in order to canonicalize the labels of the ghc binaries.

This indirection is needed because the names of the repositories generated by `nixpkgs_package` depend on which tags are used,
so we cannot call `use_repo()` in the `MODULE.bazel` file to make them visible to `rules_haskell_nix`.

They are however visible from the `nix_haskell_toolchains_configurations` repository which is generated by the same module extension (`nix_haskell_toolchains`).
  - `toolchain_ids` contains the ids of the toolchains in the correct order (the first ones take precedence).
  - `ghc_labels` contains the canonicalized labels of the corresponding ghc binaries.
  - `toolchains` contains the configuration of these toolchains.
"""

load("@bazel_tools//tools/cpp:lib_cc_configure.bzl", "get_cpu_value")
load(
    "@nix_haskell_toolchains_configurations//:nix_haskell_toolchains_configurations.bzl",
    "ghc_labels",
    "toolchain_ids",
    "toolchains",
)
load("@rules_haskell//extensions:haskell_toolchains.bzl", "all_toolchains")
load(
    "@rules_haskell_nix//:nixpkgs.bzl",
    "HASKELL_TOOLCHAIN_REPO_NAME_SUFFIX",
    "ghc_nixpkgs_toolchain_declaration",
    "register_ghc_from_nixpkgs_package",
)

def _declare_nix_toolchains_impl(mctx):
    # Instead of creating one external repository for each `toolchain(...)` declaration,
    # we recover them in a list and declare them all in the `all_bindist_toolchains` repository.
    toolchain_declarations = []
    for toolchain in toolchain_ids:
        kwargs = dict(toolchains[toolchain])
        kwargs["register"] = False
        kwargs["nixpkgs_ghc"] = ghc_labels[toolchain]
        register_ghc_from_nixpkgs_package(**kwargs)

        haskell_toolchain_repo_name = "{}{}".format(
            kwargs["name"],
            HASKELL_TOOLCHAIN_REPO_NAME_SUFFIX,
        )
        toolchain_declarations.append(
            ghc_nixpkgs_toolchain_declaration(
                exec_constraints = kwargs["exec_constraints"],
                target_constraints = kwargs["target_constraints"],
                cpu_value = get_cpu_value(mctx),
                os_name = mctx.os.name,
                haskell_toolchain_repo_name = haskell_toolchain_repo_name,
                toolchain_name = "{}",  # The toolchains names are chosen in the all_toolchains rule
            ),
        )

    all_toolchains(
        name = "all_nix_toolchains",
        toolchains = toolchain_declarations,
    )

declare_nix_toolchains = module_extension(
    implementation = _declare_nix_toolchains_impl,
    doc = "This module extension creates the haskell toolchains required by the `rules_haskell_toolchains` extension",
)
