module(
    name = "rules_haskell_nix",
    version = "1.0",
)

bazel_dep(
    name = "rules_haskell",
    version = "1.0",
)
bazel_dep(
    name = "rules_sh",
    version = "0.3.0",
)
bazel_dep(
    name = "rules_nixpkgs_core",
    version = "0.13.0",
)
bazel_dep(
    name = "rules_nixpkgs_posix",
    version = "0.13.0",
)
bazel_dep(
    name = "platforms",
    version = "0.0.8",
)
bazel_dep(name = "bazel_skylib", version = "1.5.0")
bazel_dep(name = "rules_shell", version = "0.2.0")

bazel_dep(name = "rules_go", version = "0.41.0", dev_dependency = True, repo_name = "io_bazel_rules_go")

non_module_deps = use_extension("//:non_module_deps.bzl", "non_module_deps")
use_repo(
    non_module_deps,
    "nixpkgs_default",
    "os_info",
)

nix_haskell_toolchains = use_extension(
    "//extensions:nix_haskell_toolchains.bzl",
    "nix_haskell_toolchains",
)

GHC_VERSION = "9.4.8"

# Declare a default nix-based toolchain
nix_haskell_toolchains.new(
    attribute_path = "",
    nix_file_content = "with import <nixpkgs> {{}}; haskell.packages.ghc{}.ghc".format(GHC_VERSION.replace(".", "")),
    repository = "@nixpkgs_default",
    version = GHC_VERSION,
)
use_repo(
    nix_haskell_toolchains,
    "nix_haskell_toolchains_configurations",
    # Once toochains can be registered directly via the rules_nixpkgs_posix module,
    # This repository could be removed from the nix_haskell_toolchains extension.
    "all_posix_toolchains",
)

declare_nix_toolchains = use_extension(
    "//private:declare_toolchains.bzl",
    "declare_nix_toolchains",
)
use_repo(
    declare_nix_toolchains,
    "all_nix_toolchains",
)

register_toolchains(
    "@all_nix_toolchains//:all",
    "@all_posix_toolchains//:all",
)
